{
    "Generate Crud Functions": {
        "prefix": "sp-crud",
        "body": [
            "\n@GetMapping()",
            "public ResponseEntity<?> getAll${1}() {",
            "    try {",
            "        ${0}//TODO Implement Your Logic To Get Data From Service Layer Or Directly From Repository Layer",
            "        return new ResponseEntity<>(\"GetAll Results\", HttpStatus.OK);",
            "    } catch (Exception e) {",
            "        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);",
            "    }",
            "}",
            "",
            "@GetMapping(\"/{${2:id}}\")",
            "public ResponseEntity<?> getOne${1}(@PathVariable ${3|Integer,String|} ${2:id}) {",
            "    try {",
            "        //TODO Implement Your Logic To Get Data From Service Layer Or Directly From Repository Layer",
            "        return new ResponseEntity<>(\"GetOne Result\", HttpStatus.OK);",
            "    } catch (Exception e) {",
            "        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);",
            "    }",
            "}",
            "",
            "@PostMapping()",
            "public ResponseEntity<?> create${1}(@RequestBody ${4:Dto} ${5:dto}) {",
            "    try {",
            "        //TODO Implement Your Logic To Save Data And Return Result Through ResponseEntity",
            "        return new ResponseEntity<>(\"Create Result\", HttpStatus.OK);",
            "    } catch (Exception e) {",
            "        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);",
            "    }",
            "}",
            "",
            "@PutMapping()",
            "public ResponseEntity<?> update${1}(@RequestBody ${4:Dto} ${5:dto}) {",
            "    try {",
            "        //TODO Implement Your Logic To Update Data And Return Result Through ResponseEntity",
            "        return new ResponseEntity<>(\"Update Result\", HttpStatus.OK);",
            "    } catch (Exception e) {",
            "        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);",
            "    }",
            "}",
            "",
            "@DeleteMapping(\"/{${2:id}}\")",
            "public ResponseEntity<?> destroy${1}(@PathVariable ${3|Integer,String|} ${2:id}) {",
            "    try {",
            "        //TODO Implement Your Logic To Destroy Data And Return Result Through ResponseEntity",
            "        return new ResponseEntity<>(\"Destroy Result\", HttpStatus.OK);",
            "    } catch (Exception e) {",
            "        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);",
            "    }",
            "}"
        ],
        "description": "Generate Crud Functions",
    },
    "Generate Post Request": {
        "prefix": "sp-post",
        "body": [
            "\n@PostMapping(\"/${1:url}\")",
            "public ResponseEntity<?> ${2:create}(@RequestBody ${3:Dto} ${4:dto}) {",
            "    try {",
            "        ${0}//TODO Implement Your Logic To Save Data And Return Result Through ResponseEntity",
            "        return new ResponseEntity<>(\"Create Result\", HttpStatus.OK);",
            "    } catch (Exception e) {",
            "        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);",
            "    }",
            "}",
        ],
        "description": "Generate Post Request"
    },
    "Generate Get Request": {
        "prefix": "sp-get",
        "body": [
            "\n@GetMapping(\"/${1:url}\")",
            "public ResponseEntity<?> get${2}() {",
            "    try {",
            "        ${0}//TODO Implement Your Logic To Get Data From Service Layer Or Directly From Repository Layer",
            "        return new ResponseEntity<>(\"GetAll Results\", HttpStatus.OK);",
            "    } catch (Exception e) {",
            "        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);",
            "    }",
            "}",
        ],
        "description": "Generate Get Request"
    },
    "Generate Put Request": {
        "prefix": "sp-put",
        "body": [
            "\n@PutMapping(\"/${1:url}\")",
            "public ResponseEntity<?> update${2}(@RequestBody ${3:Dto} ${4:dto}) {",
            "    try {",
            "        ${0}//TODO Implement Your Logic To Update Data And Return Result Through ResponseEntity",
            "        return new ResponseEntity<>(\"Update Result\", HttpStatus.OK);",
            "    } catch (Exception e) {",
            "        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);",
            "    }",
            "}",
        ],
        "description": "Generate Put Request"
    },
    "Generate Delete Request": {
        "prefix": "sp-delete",
        "body": [
            "\n@DeleteMapping(\"/${1:url}/{${2:id}}\")",
            "public ResponseEntity<?> destroy${4}(@PathVariable ${3|Integer,String|} ${2:id}) {",
            "    try {",
            "        ${0}//TODO Implement Your Logic To Destroy Data And Return Result Through ResponseEntity",
            "        return new ResponseEntity<>(\"Destroy Result\", HttpStatus.OK);",
            "    } catch (Exception e) {",
            "        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);",
            "    }",
            "}",
        ],
        "description": "Generate Delete Request"
    },
    "Method": {
        "prefix": "m",
        "body": [
            "${1} ${2} ${3}(${4}){$5}"
        ],
        "description": "method",
    },
    "Method void": {
        "prefix": "za",
        "body": [
            "void $1($2){$3}"
        ],
        "description": "method void",
    },
    "Method Static void": {
        "prefix": "zs",
        "body": [
            "void static $1($2){$3}"
        ],
        "description": "method static void",
    },
    "Method Numeric": {
        "prefix": "xa",
        "body": [
            "$1 $2($3){$4 return 0;}"
        ],
        "description": "method numeric",
    },
    "Method Static Numeric": {
        "prefix": "xs",
        "body": [
            "$1 static $2($3){$4 return 0;}"
        ],
        "description": "method static numeric",
    },
    "Method Object": {
        "prefix": "xa",
        "body": [
            "$1 $2($3){$4 return null;}"
        ],
        "description": "method object",
    },
    "Method Static Object": {
        "prefix": "xs",
        "body": [
            "$1 static $2($3){$4 return null;}"
        ],
        "description": "method static object",
    },
    "Method boolean": {
        "prefix": "xa",
        "body": [
            "boolean $2($3){$4 return true;}"
        ],
        "description": "method boolean",
    },
    "Method Static boolean": {
        "prefix": "xs",
        "body": [
            "boolean static $2($3){$4 return true;}"
        ],
        "description": "method static boolean",
    },
    "Method Abstract": {
        "prefix": "ma",
        "body": [
            "void $1($2);$3"
        ],
        "description": "create method void",
    }
}